<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:s="library://ns.adobe.com/flex/spark"
               xmlns:mx="library://ns.adobe.com/flex/mx"
               xmlns:esri="http://www.esri.com/2008/ags"
               xmlns:views="com.esri.views.*"
               xmlns:widgets="com.esri.widgets.*"
               xmlns:local="*"
               applicationComplete="applicationCompleteHandler(event)"
               backgroundColor="black"
               viewSourceURL="srcview/index.html">
    <fx:Script>
        <![CDATA[
            import com.adobe.viewsource.ViewSource;
            import com.esri.ags.Graphic;
            import com.esri.ags.events.DrawEvent;
            import com.esri.ags.events.LocatorEvent;
            import com.esri.ags.events.MapEvent;
            import com.esri.ags.events.MapMouseEvent;
            import com.esri.ags.events.RouteEvent;
            import com.esri.ags.layers.GraphicsLayer;
            import com.esri.ags.tools.DrawTool;
            import com.esri.events.DrawEndEvent;
            import com.esri.events.HTML5GeolocationEvent;
            import com.esri.views.MapType;

            import flash.events.GeolocationEvent;

            import mx.controls.Alert;
            import mx.events.EffectEvent;
            import mx.events.FlexEvent;
            import mx.events.ItemClickEvent;
            import mx.events.ResizeEvent;
            import mx.rpc.events.FaultEvent;

            import spark.events.IndexChangeEvent;
            import spark.events.ListEvent;

            [Bindable]
            private var _rightX:int;

            private var _drawTool:DrawTool;

            private function applicationCompleteHandler(event:FlexEvent):void
            {
                _rightX = stage.stageWidth;
                this.addEventListener(ResizeEvent.RESIZE, resizeHandler);
                ViewSource.addMenuItem(this, "srcview/index.html");
                togglePanels([ true, false, false, false, false ]);

                _drawTool = new DrawTool(map);
                _drawTool.lineSymbol = sls;
                _drawTool.markerSymbol = sms;
                _drawTool.fillSymbol = sfs;
                _drawTool.graphicsLayer = map.pointLayer;
                _drawTool.addEventListener(DrawEvent.DRAW_END, drawTool_drawEndHandler);

                codeText.htmlText = codeAddBasemap;

            }

            private function resizeHandler(event:ResizeEvent):void
            {
                _rightX = stage.stageWidth;
                codePanel.right = -475;
                codePanel.verticalCenter = 0;
            }

            private function map_loadHandler(event:MapEvent):void
            {
                map.addEventListener(FaultEvent.FAULT, faultEventHandler);
                map.addEventListener(HTML5GeolocationEvent.GEOLOCATION_UPDATE, geolocationUpdateHandler);
                map.addEventListener(LocatorEvent.ADDRESS_TO_LOCATIONS_COMPLETE, locatorEventHandler);
                map.addEventListener(RouteEvent.SOLVE_COMPLETE, routeTask_solveCompleteHandler);
                map.setCenter([ 39.12 /*lat*/, -94.6 /*lon*/ ], 4);
            }

            private function locatorEventHandler(event:LocatorEvent):void
            {
                if (event.addressCandidate == null && event.addressCandidates.length == 0)
                {
                    Alert.show("No addresses were found. Please try again.", "Place Finder");
                }
            }

            private function routeTask_solveCompleteHandler(event:RouteEvent):void
            {
                directionsDisplayWidget.visible = directionsDisplayWidget.includeInLayout = true;
            }

            private function buttonbar1_changeHandler(event:IndexChangeEvent):void
            {
                buttonBarSwitchCase(event.newIndex);
            }


            private function buttonbar1_itemRollOverHandler(event:ListEvent):void
            {
                buttonBarSwitchCase(event.itemIndex);
            }

            private function buttonBarSwitchCase(index:int):void
            {
                switch (index)
                {
                    case 0: /* Basemaps */
                    {
                        togglePanels([ true, false, false, false, false ]);
                        codeText.htmlText = codeAddBasemap;
                        selectorLabel.text = "Basemaps";
                        selectorExplanationLabel.text = "Select a basemap.";
                        break;
                    }
                    case 1: /* Geolocation */
                    {
                        togglePanels([ false, false, false, false, true ]);
                        codeText.htmlText = codeGeolocation;
                        selectorLabel.text = "Geolocation";
                        selectorExplanationLabel.text = "Zoom to your geolocation.";
                        break;
                    }
                    case 2: /* Add Graphics */
                    {
                        togglePanels([ false, true, false, false, false ]);
                        codeText.htmlText = codeAddGraphics;
                        selectorLabel.text = "Add Graphics";
                        selectorExplanationLabel.text = "Click the map to add graphics.";
                        break;
                    }
                    case 3: /* Find Places */
                    {
                        togglePanels([ false, false, true, false, false ]);
                        codeText.htmlText = codeFindPlaces;
                        selectorLabel.text = "Find Place";
                        selectorExplanationLabel.text = "Enter a place name.";
                        break;
                    }
                    case 4: /* Directions */
                    {
                        togglePanels([ false, false, false, true, false ]);
                        codeText.htmlText = codeGetDirections;
                        selectorLabel.text = "Directions";
                        selectorExplanationLabel.text = "Enter your start and stop locations.";
                        break;
                    }
                }
            }

            private function togglePanels(array:Array):void
            {
                map.baseLayerView.visible = basemapHGroup.visible = basemapHGroup.includeInLayout = array[0]; //don't show the button bar
                drawToolButtonBarPanel.visible = drawToolButtonBarPanel.includeInLayout = array[1];
                addGraphicsHGroup.visible = addGraphicsHGroup.includeInLayout = array[1];
                findPlacesHGroup.visible = findPlacesHGroup.includeInLayout = array[2];
                findDirectionsHGroup.visible = findDirectionsHGroup.includeInLayout = array[3];
                geolocationHGroup.visible = geolocationHGroup.includeInLayout = array[4];

                if (directionsDisplayWidget.display == true && array[3] == true)
                {
                    directionsDisplayWidget.visible = directionsDisplayWidget.includeInLayout = true;
                }
                if (directionsDisplayWidget.display == false && array[3] == false)
                {
                    directionsDisplayWidget.visible = directionsDisplayWidget.includeInLayout = false;
                }
                if (directionsDisplayWidget.display == true && array[3] == false)
                {
                    directionsDisplayWidget.visible = directionsDisplayWidget.includeInLayout = false;
                }
                if (directionsDisplayWidget.display == false && array[3] == true)
                {
                    directionsDisplayWidget.visible = directionsDisplayWidget.includeInLayout = false;
                }
            }

            private function faultEventHandler(event:FaultEvent):void
            {

                if (event.fault.faultCode != null)
                {
                    Alert.show(event.fault.message, "Warning");
                }
            }

            private function geolocationUpdateHandler(event:HTML5GeolocationEvent):void
            {
                Alert.show("Latitude: " + event.latitude + ", Longitude: " + event.longitude, "My Location");
            }

            private function findPlaceClickHandler():void
            {
                map.addressToLocation(findPlaceTextInput.text, 10);
            }

            private function directionsClickHandler():void
            {
                map.route([ directionsStart.text, directionsEnd.text ]);
            }

            private function panel_rollOutHandler(event:MouseEvent):void
            {
                panelOut.end();
                panelIn.play();
            }

            private function panel_rollOverHandler(event:MouseEvent):void
            {
                panelIn.end();
                panelOut.play();
            }

            private function toggleBtn(e:MouseEvent):void
            {
                if (e.currentTarget.label == 'Open')
                {
                    panelIn.end();
                    panelOut.play();
                }
                if (codePanel.x >= _rightX)
                {
                    panelIn.end();
                    panelOut.play();
                }
                else
                {

                }
            }

            private const codeAddBasemap:String =
                "<b>Adding a Basemap</b><br><br>" +
                "This code shows how to add a map and center it using a simple latitude, longitude point.<br>" +
                "_________________________________<br><br>" +
                "<font color='#0000FF'>private</font> function map_loadHandler(event:MapEvent):<font color='#0000FF'>void</font><br>" +
                "{<br>" +
                "     <font color='#00FF00'>//Center the map by specifying a latitude and longitude</font><br>" +
                "     map.setCenter([ 40.736072 <font color='#0000FF'>/*lat*/</font>, -73.992062 <font color='#0000FF'>/*lon*/</font> ]); <br>" +
                "}<br><br>" +
                "<font color='#00FF00'>&#60;!--  Listen for the load event on the ESRIMap control  --&#62;</font><br>" +
                "<font color='#0000FF'>&#60;views:ESRIMap</font> id='map' load='map_loadHandler(event)' width='100%' height='100%' top='70' <font color='#0000FF'>/&#62;</font>";

            private const codeAddGraphics:String =
                "<b>Add a graphic to the map.</b><br><br>" +
                "This sample shows two ways to add graphics.<br>" +
                "_________________________________<br><br>" +
                "<font color='#0000FF'>&#60;custom:DrawToolButtonBarWidget</font> id='rawToolButtonBarPanel' visible='false'<br>" +
                "styleName='basicContainerStyle' skinClass='skins.ControlPanelSkin'<br>" +
                "height='39' map='{map}' graphicsLayer='{map.pointLayer}'  <font color='#0000FF'>/&#62;</font>";

            private const codeFindPlaces:String =
                "<b>Find a place and map it.</b><br><br>" +
                "This code shows how to implement a basic placefinder.<br>" +
                "_________________________________<br><br>" +
                "<font color='#0000FF'>private</font> function findPlaceClickHandler():<font color='#0000FF'>void</font><br>" +
                "{<br>" +
                "   map.addressToLocation(findPlaceTextInput.text,10);<br>" +
                "}<br><br>" +
                "<font color='#0000FF'>&#60;s:TextInput</font> id='findPlaceTextInput' width='90%' prompt='100 Stout Street, Denver, CO' <font color='#0000FF'>/&#62;</font>";

            private const codeGetDirections:String =
                "<b>Get driving directions and display the route.</b><br><br>" +
                "This code shows how to quickly implement driving directions.<br>" +
                "_________________________________<br><br>" +
                "<font color='#0000FF'>private</font> function directionsClickHandler():<font color='#0000FF'>void</font><br>" +
                "{<br>" +
                "   map.route([directionsStart.text,directionsEnd.text]);<br>" +
                "}<br><br>" +
                "<font color='#0000FF'>&#60;s:TextInput</font> id='directionsStart' width='90%' prompt='Start location' <font color='#0000FF'>/&#62;</font><br>" +
                "<font color='#0000FF'>&#60;s:TextInput</font> id='directionsEnd' width='90%' prompt='End location' <font color='#0000FF'>/&#62;</font>";

            private const codeGeolocation:String =
                "<b>Use geolocation to center the map.</b><br><br>" +
                "This code shows how ask use HTML5 Geolocation to center the map.<br>" +
                "_________________________________<br><br>" +
                "<font color='#00FF00'>//Set the event listener</font><br>" +
                "map.addEventListener(HTML5GeolocationEvent.GEOLOCATION_UPDATE,geolocationUpdateHandler);<br><br>" +
                "map.centerAtMyLocation(10);<br><br>" +
                "<font color='#0000FF'>private</font> function geolocationUpdateHandler(event:HTML5GeolocationEvent):<font color='#0000FF'>void</font><br>" +
                "{<br>" +
                "     Alert.show('Latitude: ' + event.latitude + ', Longitude: ' + event.longitude);<br>" +
                "}";

            private function drawToolButtonBarPanel_drawCompleteHandler(event:DrawEndEvent):void
            {
                //When drawing completes use this pattern to retrieve the graphic
                var graphic:Graphic = event.graphic;
            }

            private function mapChangerCheckBox_clickHandler(event:MouseEvent):void
            {
                map.baseLayerView.visible = !map.baseLayerView.visible;
            }

            private function drawToolChangerCheckBox_clickHandler(event:MouseEvent):void
            {
                drawToolButtonBarPanel.visible = !drawToolButtonBarPanel.visible;
            }

            public function drawTool_drawEndHandler(event:DrawEvent):void
            {
                // reset after finished drawing a feature
                _drawTool.deactivate();

                //Retrieve the graphic from the draw event
                //var graphic:Graphic = event.graphic;
            }

            private function addPoint_clickHandler():void
            {
                clearGraphics_clickHandler();
                selectorExplanationLabel.text = "Click on map to add point.";
                map.addEventListener(MapMouseEvent.MAP_CLICK, mapClickHandler);

                //you can also use:
                //_drawTool.activate(DrawTool.MAPPOINT);
            }

            private function mapClickHandler(event:MapMouseEvent):void
            {
                map.addPoint(event.mapPoint);
            }

            private function addLine_clickHandler():void
            {
                clearGraphics_clickHandler();
                selectorExplanationLabel.text = "Click on map to start drawing. Double-click to finish.";
                _drawTool.activate(DrawTool.POLYLINE);

                //You can also use add a line programmatically:
                //map.addLine([[41.84,-87.68],[41.9,-87.9],[42.9,-89]]);
            }

            private function clearGraphics_clickHandler():void
            {
                if (map.hasEventListener(MapMouseEvent.MAP_CLICK))
                {
                    map.removeEventListener(MapMouseEvent.MAP_CLICK, mapClickHandler);
                }
                _drawTool.deactivate();
                directionsDisplayWidget.repeat.dataProvider = [];
                map.clearAll();
            }

            protected function addPolygon_clickHandler():void
            {
                clearGraphics_clickHandler();
                selectorExplanationLabel.text = "Click on map to start drawing. Double-click to finish.";
                _drawTool.activate(DrawTool.POLYGON);

                //You can also use add a line programmatically:
                //map.addPolygon([[41.84,-87.68],[41.9,-87.9],[42.9,-89],[43.9,-89.9],[42.9,-94.9],[41.84,-87.68]]);
            }
        ]]>
    </fx:Script>

    <fx:Declarations>
        <mx:Move id="panelOut"
                 duration="0"
                 startDelay="0"
                 target="{codePanel}"
                 xTo="{_rightX - 500}"/>
        <mx:Move id="panelIn"
                 duration="2000"
                 target="{codePanel}"
                 xTo="{_rightX - 25}"/>

        <!-- Symbol for all point shapes -->
        <esri:SimpleMarkerSymbol id="sms"
                                 color="0x0000FF"
                                 size="12"
                                 style="square"/>

        <!-- Symbol for all line shapes -->
        <esri:SimpleLineSymbol id="sls"
                               width="3"
                               color="0x0000FF"/>

        <!-- Symbol for all polygon shapes -->
        <esri:SimpleFillSymbol id="sfs"
                               color="0xFFFFFF"
                               style="diagonalcross">
            <esri:outline>
                <esri:SimpleLineSymbol width="2" color="0x00FF00"/>
            </esri:outline>
        </esri:SimpleFillSymbol>
    </fx:Declarations>

    <fx:Style>
        @namespace s "library://ns.adobe.com/flex/spark";
        @namespace mx "library://ns.adobe.com/flex/mx";
        @namespace esri "http://www.esri.com/2008/ags";
        @namespace views "com.esri.views.*";
        
        .basicContainerStyle{
            top:80;
            right:10;
        }
    </fx:Style>

    <!-- Main UX Group -->
    <s:VGroup width="100%" height="100%">
        <s:ButtonBar height="50"
                     left="5" top="10"
                     change="buttonbar1_changeHandler(event)"
                     itemRollOver="buttonbar1_itemRollOverHandler(event)">
            <mx:ArrayCollection>
                <fx:String>Basemaps</fx:String>
                <fx:String>Geolocation</fx:String>
                <fx:String>Add Graphics</fx:String>
                <fx:String>Find Place</fx:String>
                <fx:String>Directions</fx:String>
            </mx:ArrayCollection>
        </s:ButtonBar>

        <views:ESRIMap id="map"
                       width="100%" height="100%"
                       top="70"
                       load="map_loadHandler(event)"/>

        <s:Label id="selectorExplanationLabel"
                 width="100%" height="16"
                 color="white"
                 fontSize="16"
                 text="Select a basemap"
                 textAlign="center"
                 verticalAlign="middle"/>
        <s:BorderContainer width="100%" height="125"
                           bottom="5"
                           backgroundColor="#382D2C">

            <!-- Parent HGroup -->
            <s:HGroup width="100%" height="100%">
                <s:Spacer width="5"/>
                <s:Label id="selectorLabel"
                         width="107" height="100%"
                         color="white"
                         fontSize="16"
                         rotation="-90"
                         text="Basemaps"
                         textAlign="center"
                         verticalAlign="middle"/>

                <!-- Content Children -->
                <s:HGroup width="100%" height="100%"
                          horizontalAlign="center"
                          verticalAlign="middle">

                    <!-- Geolocation HGroup -->
                    <s:HGroup id="geolocationHGroup"
                              includeInLayout="false"
                              visible="false">
                        <s:Button width="120" height="87"
                                  click="{map.centerAtMyLocation(13);}"
                                  label="Find me!"
                                  skinClass="skins.CustomButtonSkin"/>
                        <s:Button width="87" height="87"
                                  click="{map.pointLayer.clear()}"
                                  label="Clear"
                                  skinClass="skins.CustomButtonSkin"/>
                    </s:HGroup>

                    <!-- Basemap HGroup -->
                    <s:HGroup id="basemapHGroup"
                              includeInLayout="false"
                              visible="false">
                        <s:Button id="streetsButton"
                                  width="87" height="87"
                                  click="{map.setBasemap(MapType.STREETS)}"
                                  icon="@Embed('assets/streets.png')"
                                  skinClass="skins.CustomButtonSkin"
                                  toolTip="Streets"/>
                        <s:Button id="topoButton"
                                  width="87" height="87"
                                  click="{map.setBasemap(MapType.TOPO)}"
                                  icon="@Embed('assets/topo78x78.png')"
                                  skinClass="skins.CustomButtonSkin"
                                  toolTip="Topo"/>
                        <s:Button id="satelliteButton"
                                  width="87" height="87"
                                  click="{map.setBasemap(MapType.AERIAL)}"
                                  icon="@Embed('assets/satellite.png')"
                                  skinClass="skins.CustomButtonSkin"
                                  toolTip="Satellite"/>
                        <s:BorderContainer width="87" height="87"
                                           backgroundAlpha="0">
                            <s:VGroup horizontalCenter="0" verticalCenter="0">
                                <s:CheckBox id="mapChangerCheckBox"
                                            click="mapChangerCheckBox_clickHandler(event)"
                                            scaleX="1.5"
                                            scaleY="1.5"
                                            selected="true"
                                            toolTip="Toogle map widget"/>
                                <s:Label color="white" text="Map Widget"/>
                            </s:VGroup>
                        </s:BorderContainer>
                    </s:HGroup>

                    <!-- Add Graphics HGroup -->
                    <s:HGroup id="addGraphicsHGroup"
                              includeInLayout="false"
                              visible="false">
                        <s:Button width="87" height="87"
                                  click="addPoint_clickHandler()"
                                  label="Add Point"
                                  skinClass="skins.CustomButtonSkin"/>
                        <s:Button width="87" height="87"
                                  click="addLine_clickHandler()"
                                  label="Add Line"
                                  skinClass="skins.CustomButtonSkin"/>
                        <s:Button width="87" height="87"
                                  click="addPolygon_clickHandler()"
                                  label="Add Polygon"
                                  skinClass="skins.CustomButtonSkin"/>
                        <s:Button width="87" height="87"
                                  click="clearGraphics_clickHandler()"
                                  label="Clear"
                                  skinClass="skins.CustomButtonSkin"/>
                        <s:BorderContainer width="87" height="87"
                                           backgroundAlpha="0">
                            <s:VGroup horizontalCenter="0" verticalCenter="0">
                                <s:CheckBox id="drawToolChangerCheckBox"
                                            click="drawToolChangerCheckBox_clickHandler(event)"
                                            scaleX="1.5"
                                            scaleY="1.5"
                                            selected="true"
                                            toolTip="Toogle draw widget"/>
                                <s:Label color="white" text="Draw Widget"/>
                            </s:VGroup>
                        </s:BorderContainer>
                    </s:HGroup>

                    <!-- Find Places HGroup -->
                    <s:HGroup id="findPlacesHGroup"
                              includeInLayout="false"
                              visible="false">
                        <s:BorderContainer width="160" height="87"
                                           backgroundAlpha="0">
                            <s:VGroup horizontalCenter="0" verticalCenter="0">
                                <s:TextInput id="findPlaceTextInput"
                                             width="150"
                                             prompt="100 Stout Street, Denver, CO"/>
                            </s:VGroup>
                        </s:BorderContainer>
                        <s:Button width="87" height="87"
                                  click="findPlaceClickHandler()"
                                  label="Go"
                                  skinClass="skins.CustomButtonSkin"/>
                        <s:Button width="87" height="87"
                                  click="{map.pointLayer.clear()}"
                                  label="Clear"
                                  skinClass="skins.CustomButtonSkin"/>
                    </s:HGroup>

                    <!-- Directions HGroup -->
                    <s:HGroup id="findDirectionsHGroup"
                              includeInLayout="false"
                              visible="false">
                        <s:BorderContainer width="160" height="87"
                                           backgroundAlpha="0">
                            <s:VGroup horizontalAlign="center" verticalCenter="0">
                                <s:Label color="white" text="Begin Address"/>
                                <s:TextInput id="directionsStart"
                                             width="150"
                                             prompt="Denver, CO"/>
                            </s:VGroup>
                        </s:BorderContainer>
                        <s:BorderContainer width="160" height="87"
                                           backgroundAlpha="0">
                            <s:VGroup horizontalAlign="center" verticalCenter="0">
                                <s:Label color="white" text="End Address"/>
                                <s:TextInput id="directionsEnd"
                                             width="150"
                                             prompt="Colorado Springs, CO"/>
                            </s:VGroup>
                        </s:BorderContainer>
                        <s:Button width="87" height="87"
                                  click="directionsClickHandler()"
                                  label="Go"
                                  skinClass="skins.CustomButtonSkin"/>
                        <s:Button width="87" height="87"
                                  click="clearGraphics_clickHandler()"
                                  label="Clear"
                                  skinClass="skins.CustomButtonSkin"/>
                    </s:HGroup>

                </s:HGroup>

            </s:HGroup>

        </s:BorderContainer>
    </s:VGroup>

    <!-- DrawTool Widget -->
    <widgets:DrawToolButtonBarWidget id="drawToolButtonBarPanel"
                                     height="39"
                                     right="10" top="60"
                                     drawEnd="drawToolButtonBarPanel_drawCompleteHandler(event)"
                                     graphicsLayer="{map.pointLayer}"
                                     map="{map}"
                                     styleName="basicContainerStyle"
                                     visible="false"/>
    <!--
    <s:Panel id="findPlacePanel" styleName="basicContainerStyle" height="100" width="200"
             visible="false" title="Enter a place or address">
        <s:layout>
            <s:VerticalLayout paddingTop="10" horizontalAlign="center"/>
        </s:layout>
        <s:TextInput id="findPlaceTextInput1" width="90%" prompt="100 Stout Street, Denver, CO" />
        <s:Button label="Go" bottom="5" click="findPlaceClickHandler()"  />
    </s:Panel>

    <s:Panel id="directionsPanel" styleName="basicContainerStyle" height="130" width="200"
             visible="false" title="Get Directions">
        <s:layout>
            <s:VerticalLayout paddingTop="10" horizontalAlign="center"/>
        </s:layout>
        <s:TextInput id="directionsStart" width="90%" prompt="Start location" />
        <s:TextInput id="directionsEnd" width="90%" prompt="End location" />
        <s:Button label="Go" click="directionsClickHandler()"  />
    </s:Panel>
    -->

    <s:BorderContainer id="codePanel"
                       width="500" height="400"
                       right="-475"
                       backgroundAlpha="0.6"
                       backgroundColor="#000000"
                       borderColor="black"
                       borderStyle="solid"
                       cornerRadius="10"
                       rollOut="panel_rollOutHandler(event)"
                       rollOver="panel_rollOverHandler(event)"
                       verticalCenter="0">
        <s:HGroup width="100%" height="100%">
            <s:Label width="20" height="100%"
                     color="white"
                     rotation="-90"
                     text="Code"
                     textAlign="center"
                     verticalAlign="middle"/>
            <mx:Text id="codeText"
                     width="100%" height="100%"
                     color="black"
                     opaqueBackground="0xFFFFFF"
                     paddingBottom="20"
                     paddingTop="20"/>
        </s:HGroup>
    </s:BorderContainer>

    <local:DirectionsDisplayWidget id="directionsDisplayWidget"
                                   left="10" top="90"
                                   backgroundAlpha="0.7"
                                   color="white"
                                   includeInLayout="false"
                                   map="{map}"
                                   visible="false"/>

</s:Application>
